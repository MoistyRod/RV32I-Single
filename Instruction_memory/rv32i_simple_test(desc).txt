#Below is a simple bare-metal test for my basic simulated RV32I core. It does not include EBREAK, ECALL or any CSR instructions.
#A testbench is used to input each instruction into the core. The "Result"(WriteBack) and the "PCNext" values are then compared to the expected values. 
#All registers are written to and read from.

#Arithmetic instructions
#add, addi, sub

#test addi and x0
addi x0, x0, 15 	#should not save

addi x1, x0, 2047 	#0+2047 = 2047
addi x2, x1, -2048 	#2047-2048 = -1

sub x3, x0, x1 		#0-2047 = -2047
sub x4, x3, x3 		#-2047-(-2047) = 0

add x5, x3, x1 		#-2047+2047 = 0
add x6, x5, x1 		#0+2047 = 2047


#Logical instructions
#and, andi, xor, xori, or, ori
#slt, sltu, slti, sltiu

and x7, x6, x2 		#2047&-1 = 2047
and x8, x7, x4 		#2047&0 = 0

andi x9, x7, -1 	#2047&-1 = 2047
andi x10, x9, 0 	#2047&0 = 0

or x11, x3, x10 	#-2047|0 = -2047
or x12, x11, x2 	#-2047|-1 = -1

ori x13, x3, 0 		#-2047|0 = -2047
ori x13, x12, -2048 	#-2048|-1 = -1

xor x14, x1, x13 	#!2047 = -2048
xor x14, x14, x0 	#-2048

xori x15, x14, -1 	#!-2048 = 2047
xori x15, x15, 0 	#2047

slt x16, x14, x0	#-2048<0 = true
slt x16, x0, x14 	#0<-2048 = false

sltu x17, x16, x14	#0<0xFFFFF800 = true
sltu x17, x14, x16 	#0xFFFFF800<0 = false

slti x18, x17, -2048 	#0<-2048 = false
slti x19, x14, 0 	#-2048<0 = true

sltiu x19, x18, -2048 	#0<0xFFFFF800 = true
sltiu x19, x14, 0 	#0xFFFFF800>0 = false


#Shift instructions
#sll, slli, srl, srli, sra, srai

srli x20, x2, 27 	#-1 >> 27 = 31

slli x21, x2, 31 	#-1 << 31 = 0x8000 0000

srai x22, x21, 31 	#8000 0000 >>> 31 = -1

sll x23, x22, x20 	#-1 << 31 = 0x8000 0000

sra x24, x23, x20 	#0x8000 0000 >>> 31 = -1

srl x24, x23, x20 	#0x8000 0000 >> 31 = 1


#Upper instructions
#lui, auipc

lui x24, 0xAABB1 	#x24 = 0xAABB 1000

auipc x18, 0xABCDE 	#x25 = 0xABCD E088


#Memory access instructions
#lb, lbu, lh, lhu, lw
#sb, sh, sw

#initialize registers
addi x25, x24, 0x122 	#x24 = 0xAABB 1122
addi x26, x0, 0
addi x27, x0, 0
addi x28, x0, 0
addi x29, x0, 0
addi x30, x0, 0
addi x31, x0, 0

sw x25, 0(x0) 		#mem[0] = 0xAABB 1122

lb x26, 0(x0) 		#x26 = 22
sb x26, 4(x0) 		#mem[1] = 0x0000 0022

lbu x27, 1(x0) 		#x27 = 11
sb x27, 5(x0) 		#mem[1] = 0x0000 1122

lb x28, 2(x0) 		#x28 = FFFF FFBB
sb x28, 6(x0) 		#mem[1] = 0x00BB 1122

lbu x29, 3(x0) 		#x29 = 0x0000 00AA
sb x29, 7(x0) 		#mem[1] = 0xAABB 1122

lh x30, 4(x0) 		#x30 = 0x0000 1122
sh x30, 8(x0) 		#mem[2] = 0x0000 1122

lhu x31, 6(x0) 		#x31 = 0x0000 AABB
lh x31, 6(x0) 		#x31 = 0xFFFF AABB
sh x31, 10(x0) 		#mem[2] = 0xAABB 1122

lw x26, 8(x0) 		#x26 = 0xAABB 1122


#Branch instructions
#beq, bne, blt, bltu, bge, bgeu

B_0:
beq x26, x25, B_2 	#0xAABB1122 == 0xAABB1122
B_1:
blt x3, x1, B_3		#-2047 < 2047
B_2:
bne x26, x2, B_1 	#0xAABB1122 != 0xFFFFFFFF
B_3:
bltu x1, x3, B_5	#2047 < -2047 unsigned 	
B_4:
bgeu x3, x1, DONT_TAKE	#-2047 > 2047 unsigned
B_5:
bge x1, x3, B_4		#2047 > -2047

DONT_TAKE:
beq x26, x2, END
bne x26, x25, END
blt x1, x3, END
bltu x3, x1, END
bge x3, x1, END
bgeu x1, x3, END


#Jump instructions
#jal, jalr

jal x1, B_A 		#jump to B_A
jal x0, B_B		#jump to B_B
B_A:
jalr x1, x1		#jump back up to jal return address. Set new jalr return address
jal x0, END		#jump to END
B_B:
jalr x0, x1		#jump up to jal


END:
jal END